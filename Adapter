#include <iostream>
#include <memory>

class Target {
public:
    virtual ~Target() = default;
    virtual void request() const = 0;
};

class Adaptee {
public:
    void specificRequest() const {
        std::cout << "Adaptee: Specific request\n";
    }
};

class Adapter : public Target {
public:
    Adapter(std::unique_ptr<Adaptee> adaptee) : adaptee_(std::move(adaptee)) {}

    void request() const override {
        std::cout << "Adapter: Translating request to specific request.\n";
        adaptee_->specificRequest();
    }

private:
    std::unique_ptr<Adaptee> adaptee_;
};

class Client {
public:
    void process(const Target& target) {
        std::cout << "Client: Processing target.\n";
        target.request();
    }
};

int main() {
    std::unique_ptr<Adaptee> adaptee(new Adaptee());
    std::unique_ptr<Target> adapter(new Adapter(std::move(adaptee)));

    Client client;
    client.process(*adapter);

    return 0;
}
